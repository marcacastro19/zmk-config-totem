//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <175>;
    global-quick-tap = <75>;
    flavor = "balanced";
    tapping-term-ms = <280>;
};

&sk {
    quick-release;
    release-after-ms = <1500>;
};

/ {
    combos {
        compatible = "zmk,combos";

        ctrl_l {
            bindings = <&kp LCTRL>;
            key-positions = <11 12>;
            require-prior-idle-ms = <150>;
        };

        ctrl_r {
            bindings = <&kp LCTRL>;
            key-positions = <18 17>;
            require-prior-idle-ms = <150>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <19 18>;
            require-prior-idle-ms = <150>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            require-prior-idle-ms = <150>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            require-prior-idle-ms = <150>;
        };

        pivot {
            bindings = <&pivot>;
            key-positions = <26 27>;
            require-prior-idle-ms = <150>;
        };

        alt {
            bindings = <&sk LEFT_ALT>;
            key-positions = <0 1>;
            require-prior-idle-ms = <150>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <29 30>;
            require-prior-idle-ms = <150>;
        };

        ctrlshft {
            bindings = <&kp LS(LCTRL)>;
            key-positions = <11 12 13>;
            require-prior-idle-ms = <150>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
            require-prior-idle-ms = <150>;
        };

        alt_paste {
            bindings = <&kp LC(LA(V))>;
            key-positions = <24 22 23>;
            require-prior-idle-ms = <150>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <22 21>;
            require-prior-idle-ms = <150>;
        };

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 1>;
            require-prior-idle-ms = <150>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };

        pivot: pivot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp N &kp V &kp T>;
            label = "PIVOT";
        };
    };

    behaviors {
        hold_layer_tap: hold_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
            &kp Q  &kp W  &kp E    &kp R           &kp T                          &kp Y                    &kp U      &kp I         &kp O    &kp P
            &kp A  &kp S  &kp D    &kp F           &kp G                          &kp H                    &kp J      &kp K         &kp L    &kp SEMICOLON
&kp ESCAPE  &kp Z  &kp X  &kp C    &kp V           &kp B                          &kp N                    &kp M      &kp COMMA     &kp DOT  &kp FSLH       &kp SQT
                          &kp TAB  &sk LEFT_SHIFT  &hold_layer_tap 1 BACKSPACE    &hold_layer_tap 2 SPACE  &kp ENTER  &kp LEFT_GUI
            >;
        };

        num {
            bindings = <
        &kp N1        &kp N2        &kp N3         &kp N4    &kp N5           &kp N6                   &kp N7    &kp N8    &kp N9     &kp N0
        &kp EQUAL     &trans        &trans         &kp HOME  &kp PAGE_UP      &kp UP                   &kp LEFT  &kp DOWN  &kp RIGHT  &kp PLUS
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &trans         &kp END   &kp PAGE_DOWN    &trans                   &trans    &trans    &trans     &trans    &kp MINUS
                                    &kp LC(GRAVE)  &trans    &trans           &hold_layer_tap 3 SPACE  &trans    &trans
            >;
        };

        sym {
            bindings = <
        &kp EXCLAMATION  &kp AT  &kp HASH   &kp DOLLAR  &kp PERCENT    &kp CARET     &kp AMPERSAND  &kp STAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
        &kp EQUAL        &trans  &trans     &trans      &trans         &kp UP_ARROW  &kp LEFT       &kp DOWN  &kp RIGHT             &kp PLUS
&trans  &trans           &trans  &trans     &trans      &trans         &trans        &trans         &trans    &trans                &trans                 &kp UNDERSCORE
                                 &kp TILDE  &trans      &trans         &trans        &trans         &trans
            >;
        };

        function {
            bindings = <
       &kp F1   &kp F2   &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
       &kp F11  &kp F12  &none   &none   &none     &none   &none   &none   &none   &none
&none  &none    &none    &none   &none   &none     &none   &none   &none   &none   &none    &none
                         &none   &none   &none     &none   &none   &none
            >;
        };

        nav_num {
            bindings = <
       &trans     &kp HOME  &kp UP         &kp END    &trans    &trans  &kp N7  &kp N8      &kp N9  &kp N0
       &kp EQUAL  &kp LEFT  &kp DOWN       &kp RIGHT  &trans    &trans  &kp N4  &kp N5      &kp N6  &kp PLUS
&to 0  &trans     &trans    &trans         &trans     &trans    &trans  &kp N1  &kp N2      &kp N3  &kp FSLH  &kp MINUS
                            &kp LC(GRAVE)  &trans     &trans    &trans  &trans  &kp PERIOD
            >;
        };

        layer_4 {
            bindings = <
                &kp EXCLAMATION  &kp AT        &kp HASH   &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp STAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
                &kp N1           &kp N2        &kp N3     &kp N4      &kp N5         &kp N6     &kp N7         &kp N8    &kp N9                &kp N0
&kp UNDERSCORE  &bt BT_SEL 0     &bt BT_SEL 1  &trans     &trans      &trans         &trans     &trans         &trans    &trans                &trans                 &kp MINUS
                                               &kp TILDE  &trans      &mo 6          &mo 6      &trans         &trans
            >;
        };

        layer_5 {
            bindings = <
       &none         &kp HOME      &kp UP_ARROW  &kp END    &none    &none         &none           &none     &none      &none
       &none         &kp LEFT      &kp DOWN      &kp RIGHT  &none    &kp UP_ARROW  &kp LEFT_ARROW  &kp DOWN  &kp RIGHT  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &none         &none      &none    &none         &none           &none     &none      &none  &none
                                   &none         &none      &none    &none         &none           &none
            >;
        };
    };
};
